{"version":3,"sources":["herb/spec.cljc"],"mappings":";AAGA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAqB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAW,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeC,AAAiBC;AAA3C,AAAA,AAAAH,AAA0DI;AAA1D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA0DA;AAC/E,AAAAN,AAAA,AAAA,AAAA,AAAA,AAAiB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAW,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAcE,AAAiBD;AAA1C,AAAA,AAAAG,AAA0DC;AAA1D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA0DA;AAC3E,AAAAR,AAAA,AAAA,AAAA,AAAA,AAAiB,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACjB,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAiB,AAAAY,AAAA,AAAA,AAAK,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAASE,AAAWQ;AAC1C,AAAAb,AAAA,AAAA,AAAA,AAAA,AAAe,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAa,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAiB,AAAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAUC,AAAcC,AAAgBM;AAIrF,AAAAX,AAAA,AAAA,AAAA,AAAA,AAAgB,AAAAY,AAAA,AAAA,AAAA;AAGhB,AAAAZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAe,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAaG,AACdC;AAMP,AAAAlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAe,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkBG,AACnBC","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha.every_impl","G__28727","cljs.spec.alpha/or-spec-impl","cljs.core/keyword?","cljs.core/string?","cljs.core/set?","G__28737","cljs.core/vector?","cljs.spec.alpha/map-spec-impl","G__28748","cljs.core/map?","cljs.spec.alpha/rep+impl","cljs.core/nil?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/symbol?","cljs.core/any?"],"sourcesContent":["(ns herb.spec\n  (:require [clojure.spec.alpha :as s]))\n\n(s/def ::auto-prefix (s/coll-of (s/or :keyword keyword? :string string?) :kind set?))\n(s/def ::vendors (s/coll-of (s/or :string string? :keyword keyword?) :kind vector?))\n(s/def ::options (s/keys :opt-un [::vendors ::auto-prefix]))\n(s/def ::classes (s/+ (s/or :s string? :n nil?)))\n(s/def ::frame (s/or :frame (s/cat :keyframe (s/or :kw keyword? :str string?) :style map?)))\n;; (s/def ::style (s/or :style (s/cat :identifier (s/+ (s/alt :kw keyword? :str string?)) :style map?)))\n;; (s/def ::at-rule (s/or :media (s/cat :fn symbol? :query map? :s vector?)))\n\n(s/def ::frames (s/+ ::frame))\n;; (s/def ::styles (s/+ (s/or :s ::style :m ::at-rule)))\n\n(s/fdef herb.core/defkeyframes\n  :args (s/cat :name symbol? :frames ::frames)\n  :ret any?)\n\n;; (s/fdef herb.core/defglobal\n;;   :args (s/cat :name symbol? :styles ::styles)\n;;   :ret any?)\n\n(s/fdef herb.core/<keyframes\n  :args (s/cat :keyframes symbol?)\n  :ret any?)\n"]}