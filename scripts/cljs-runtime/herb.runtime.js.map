{"version":3,"sources":["herb/runtime.cljs"],"mappings":"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","names":["herb.runtime/dev?","js/goog.DEBUG","js/herb","js/herb.runtime","js/herb.runtime.injected-styles","herb.runtime/injected-styles","cljs.core.atom","js/herb.runtime.injected-keyframes","herb.runtime/injected-keyframes","js/herb.runtime.injected-global","herb.runtime/injected-global","js/herb.runtime.options","herb.runtime/options","p__30359","map__30360","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","herb.runtime/update-state","state","ident","data","data-string","element","css","temp__5733__auto__","old","cljs.core/deref","cljs.core/assoc-in","cljs.core/first","cljs.core/last","herb.runtime/combinator-fns","garden.selectors/>","garden.selectors/+","garden.selectors/-","garden.selectors/descendant","herb.runtime/render-style!","identifier","new","style","vec__30362","cljs.core.nth","map__30365","classname","pseudo","media","supports","prefix","vendors","combinators","cljs.core/with-meta","cljs.core.map","p__30367","vec__30368","vec__30371","seq__30372","cljs.core/seq","first__30373","cljs.core/next","combinator","elements","cfn","cljs.core.ex_info","css-str","garden.core.css","goog.dom/append","cljs.core.swap_BANG_","herb.runtime/create-element!","attr","head","js/document","js/Error","herb.runtime/create-style!","data-str","G__30374","cljs.core.assoc","herb.runtime/inject-style!","injected","target","cljs.core/not","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","herb.runtime/inject-obj!","seq30375","G__30376","G__30377","self__4723__auto__","sym","dispatch","obj","G__30379","cljs.core/Keyword","cljs.core._EQ_","or__4126__auto__","cljs.core/name","inner-html","goog.object/get","goog.object/set","cljs.core/assoc"],"sourcesContent":["(ns herb.runtime\n  (:require [goog.dom :as dom]\n            [goog.object :as gobj]\n            [garden.core :refer [css]]\n            [garden.selectors :as s]))\n\n(def dev? ^boolean js/goog.DEBUG)\n\n(defonce\n  ^{:private true\n    :doc \"Atom containing all styles added to DOM. Takes the form of a map with\n  classnames as keys. The map entry contains a `:data` which is Herb's\n  representation of a style unit, `:data-string` which is what is used as the\n  style data attribute in DOM, and `:css` which contains the rendered CSS\n  string.\"}\n  injected-styles (atom {}))\n\n(defonce\n  ^{:private true\n    :doc \"Atom containing all keyframe CSS added to DOM. Takes the form of a map\n  with a namespace as a key. A map entry contains the keys `:data` which is herb's\n  representation of a keyframe unit and `:css` which is the rendered CSS\n  string\"}\n  injected-keyframes (atom {}))\n\n(defonce\n  ^{:private true\n    :doc \"Atom containing all global style added to DOM. Takes the form of a map\n  with namespace as keys. A map entry contains `:data` which is a collection of\n  global styles for a given via defglobal call and `:css` that contains the\n  rendered CSS\"}\n  injected-global (atom {}))\n\n(defonce\n  ^{:doc \"Atom containing a map with options passed from `herb.core/init!`.\n  Entry includes `:vendors` and `:auto-prefix`\"}\n  options (atom {}))\n\n(defn- update-state\n  \"Either update a style in state, or create it depending on existing state.\"\n  [state ident {:keys [data data-string element]} css]\n  (let [css (if-let [old (get @injected-styles ident)]\n              (str (:css old) \"\\n\" css)\n              css)]\n    (-> (assoc-in state [ident :data (first data)] (last data))\n        (assoc-in [ident :data-string] data-string)\n        (assoc-in [ident :element] element)\n        (assoc-in [ident :css] css))))\n\n(def combinator-fns\n  {:> s/>\n   :+ s/+\n   :- s/-\n   :descendant s/descendant})\n\n(defn- render-style!\n  \"Renders CSS, and appends to DOM. Ensure state is in sync with DOM.\"\n  [identifier new]\n  (let [style (let [[classname {:keys [style pseudo media supports prefix vendors combinators]}] (:data new)]\n                [[classname (with-meta style {:prefix prefix :vendors vendors})\n                  pseudo media supports]\n                 [(map (fn [[[combinator & elements] style]]\n                         (if-let [cfn (get combinator-fns combinator)]\n                           [(apply cfn classname elements) style]\n                           (throw (ex-info \"Unsupported combinator function \"\n                                           {:combinator combinator\n                                            :elements elements\n                                            :style style}))))\n                       combinators)]])\n        css-str (css {:vendors (seq (:vendors @options))\n                      :pretty-print? dev?\n                      :auto-prefix (seq (:auto-prefix @options))}\n                     style)]\n    (dom/append (:element new) (str \"\\n\" css-str))\n    (swap! injected-styles update-state identifier new css-str)))\n\n\n(defn- create-element!\n  \"Create an element in the DOM with an optional data-herb attribute\"\n  [attr]\n  (let [head (.-head js/document)]\n    (assert (some? head) \"An head element is required in the dom to inject the style.\")\n    (let [element (.createElement js/document \"style\")]\n      (.setAttribute element \"type\" \"text/css\")\n      (when attr\n        (.setAttribute element \"data-herb\" attr))\n      (.appendChild head element)\n      element)))\n\n(defn- create-style!\n  \"Create a style element in head if identifier is not already present Attach a\n  data attr with namespace and call render-style with new element\"\n  [identifier new data-str]\n  (let [element (create-element! data-str)]\n    (render-style! identifier (cond-> {:data new :element element}\n                                data-str (assoc :data-string data-str)))))\n\n\n(defn inject-style!\n  \"Main interface to runtime. Takes an identifier, new garden style data\n  structure, fully qualified name. Make sure to add style only where\n  necessary. Returns the injected style state object.\"\n  [identifier new data-str]\n  (let [injected (get @injected-styles identifier)\n        target (get (:data injected) (first new))]\n    (cond\n      (not injected)\n      (create-style! identifier new data-str)\n\n      (and (some? injected)\n           (not target))\n      (render-style!\n       identifier\n       {:data new\n        :element (:element injected)\n        :data-string data-str}))\n\n    (get @injected-styles identifier)))\n\n(defn inject-obj!\n  \"Inject collection of style objects in a common element, used by passing a\n  dispatch in the form of :keyframes or :global\"\n  [sym dispatch & obj]\n  (let [state (case dispatch\n                :global injected-global\n                :keyframes injected-keyframes)]\n    (when-not (= (:data (get @state sym)) obj)\n      (let [css-str (css {:pretty-print? dev?} obj)]\n        (let [element (or (.querySelector js/document (str \"style[data-herb=\\\"\" (name dispatch) \"\\\"]\"))\n                          (create-element! (name dispatch)))\n              inner-html (gobj/get element \"innerHTML\")]\n          (gobj/set element \"innerHTML\" (str inner-html (when dev? \"\\n\") css-str)))\n        (swap! state assoc sym {:data obj :css css-str})))))\n"]}