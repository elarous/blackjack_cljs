{"version":3,"sources":["blackjack_cljs/subs.cljs"],"mappings":";AAIA,AAAA,AAACA,AAEA,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASG;AAAT,AAAAF,AAAAD,AAAA,AAAA,AAAWI;AAAX,AACE,AAAMC,AAAU,AAAKC;AAAL,AACE,AAAK,AAAA,AAASA,AAAM,AAAA,AAAA,AAAA,AAAA,AAAIA,AAAWC,AAAKC,AAAMC;;AADhE,AAEE,AAACC,AAAI,AAAKJ;AAAL,AAAA,AAAA,AAAA,AACS,AAAA,AAAA,AAAmB,AAACD,AAAUC,AACxB,AAAA,AAAaA;AAC5B,AAACK,AAAIT,AAAGE;;AAElB,AAAA,AAACN,AAEA,AAAAc,AAAKV;AAAL,AAAA,AAAAW,AAAAD;AAAA,AAAAX,AAAAY,AAAA,AAAA,AAASV;AAAT,AAAAF,AAAAY,AAAA,AAAA,AAAWT;AAAX,AACE,AAAAU,AAAMV;AAANU,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACU,AAAA,AAASZ;;;AADnB;AAEU,AAAA,AAAOA;;;;AAFjB,AAAA,AAAAc,AAAA,AAAA,AAAAF;;;;AAIH,AAAA,AAAChB,AAEA,AAAKI,AAAGC;AAAR,AACE,AAAA,AAAQD;;AAEX,AAAA,AAACJ,AAEA,AAAKI,AAAGC;AAAR,AACE,AAAA,AAAWD;;AAEd,AAAA,AAACJ,AAEA,AAAKI,AAAGC;AAAR,AACE,AAAA,AAAYD;;AAEf,AAAA,AAACJ,AAEA,AAAKI,AAAGC;AAAR,AACE,AAAA,AAAQD;;AAGX","names":["re_frame.core.reg_sub","p__48369","vec__48370","cljs.core.nth","db","_","contender","card-name","card","cljs.core/name","cljs.core/first","clojure.string/upper-case","cljs.core.map","cljs.core.get","p__48373","vec__48374","G__48377","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns blackjack-cljs.subs\n  (:require [re-frame.core :as rf]\n            [clojure.string :as s]))\n\n(rf/reg-sub\n :cards\n (fn [db [_ contender]]\n   (let [card-name (fn [card]\n                     (str (:number card) (-> card :type name first s/upper-case)))]\n     (map (fn [card]\n            {:path (str \"imgs/cards/\" (card-name card) \".svg\")\n             :face-down? (:face-down? card)})\n          (get db contender)))))\n\n(rf/reg-sub\n :score\n (fn [db [_ contender]]\n   (case contender\n     :dealer (:losses db)\n     :player (:wins db))))\n\n(rf/reg-sub\n :round\n (fn [db _]\n   (:round db)))\n\n(rf/reg-sub\n :won?\n (fn [db _]\n   (:has-won? db)))\n\n(rf/reg-sub\n :lost?\n (fn [db _]\n   (:has-lost? db)))\n\n(rf/reg-sub\n :draw?\n (fn [db _]\n   (:draw? db)))\n\n\n(comment\n  @(rf/subscribe [:cards :player])\n\n  @(rf/subscribe [:score :dealer])\n  @(rf/subscribe [:round])\n\n  (rf/dispatch [:initialize-db])\n\n  )\n"]}